
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141204 (SVN rev 60)
//----------------------------------------------------

package cup.example;

import java_cup.runtime.*;
import cup.example.Lexer;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141204 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\043\000\002\002\004\000\002\005\004\000\002\005" +
    "\004\000\002\005\004\000\002\005\004\000\002\005\004" +
    "\000\002\005\004\000\002\005\004\000\002\005\003\000" +
    "\002\006\004\000\002\006\004\000\002\006\004\000\002" +
    "\006\004\000\002\006\004\000\002\006\004\000\002\006" +
    "\004\000\002\004\002\000\002\007\005\000\002\007\005" +
    "\000\002\007\005\000\002\015\013\000\002\016\004\000" +
    "\002\016\003\000\002\017\005\000\002\017\003\000\002" +
    "\003\003\000\002\003\003\000\002\013\005\000\002\013" +
    "\005\000\002\013\003\000\002\020\005\000\002\020\005" +
    "\000\002\020\003\000\002\021\003\000\002\021\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\103\000\014\002\ufff1\036\015\052\023\053\014\054" +
    "\016\001\002\000\016\002\ufff1\036\015\051\ufff1\052\023" +
    "\053\014\054\016\001\002\000\016\002\ufff1\036\015\051" +
    "\ufff1\052\023\053\014\054\016\001\002\000\026\002\uffe4" +
    "\005\uffe4\006\uffe4\010\036\011\035\036\uffe4\051\uffe4\052" +
    "\uffe4\053\uffe4\054\uffe4\001\002\000\016\002\ufff1\036\015" +
    "\051\ufff1\052\023\053\014\054\016\001\002\000\016\002" +
    "\ufff1\036\015\051\ufff1\052\023\053\014\054\016\001\002" +
    "\000\016\002\ufff1\036\015\051\ufff1\052\023\053\014\054" +
    "\016\001\002\000\016\002\ufff1\036\015\051\ufff1\052\023" +
    "\053\014\054\016\001\002\000\022\002\ufff1\005\032\006" +
    "\033\036\015\051\ufff1\052\023\053\014\054\016\001\002" +
    "\000\026\002\uffe7\005\uffe7\006\uffe7\010\uffe7\011\uffe7\036" +
    "\uffe7\051\uffe7\052\uffe7\053\uffe7\054\uffe7\001\002\000\004" +
    "\054\042\001\002\000\030\002\uffdf\005\uffdf\006\uffdf\010" +
    "\uffdf\011\uffdf\012\025\036\uffdf\051\uffdf\052\uffdf\053\uffdf" +
    "\054\uffdf\001\002\000\026\002\uffe0\005\uffe0\006\uffe0\010" +
    "\uffe0\011\uffe0\036\uffe0\051\uffe0\052\uffe0\053\uffe0\054\uffe0" +
    "\001\002\000\004\002\024\001\002\000\006\002\ufff9\051" +
    "\ufff9\001\002\000\026\002\uffe1\005\uffe1\006\uffe1\010\uffe1" +
    "\011\uffe1\036\uffe1\051\uffe1\052\uffe1\053\uffe1\054\uffe1\001" +
    "\002\000\026\002\uffe8\005\uffe8\006\uffe8\010\uffe8\011\uffe8" +
    "\036\uffe8\051\uffe8\052\uffe8\053\uffe8\054\uffe8\001\002\000" +
    "\004\002\001\001\002\000\012\052\023\053\014\054\031" +
    "\060\026\001\002\000\016\002\ufff0\036\ufff0\051\ufff0\052" +
    "\ufff0\053\ufff0\054\ufff0\001\002\000\016\002\uffee\036\uffee" +
    "\051\uffee\052\uffee\053\uffee\054\uffee\001\002\000\022\002" +
    "\uffef\005\032\006\033\036\uffef\051\uffef\052\uffef\053\uffef" +
    "\054\uffef\001\002\000\026\002\uffdf\005\uffdf\006\uffdf\010" +
    "\uffdf\011\uffdf\036\uffdf\051\uffdf\052\uffdf\053\uffdf\054\uffdf" +
    "\001\002\000\010\052\023\053\014\054\031\001\002\000" +
    "\010\052\023\053\014\054\031\001\002\000\026\002\uffe5" +
    "\005\uffe5\006\uffe5\010\036\011\035\036\uffe5\051\uffe5\052" +
    "\uffe5\053\uffe5\054\uffe5\001\002\000\010\052\023\053\014" +
    "\054\031\001\002\000\010\052\023\053\014\054\031\001" +
    "\002\000\026\002\uffe3\005\uffe3\006\uffe3\010\uffe3\011\uffe3" +
    "\036\uffe3\051\uffe3\052\uffe3\053\uffe3\054\uffe3\001\002\000" +
    "\026\002\uffe2\005\uffe2\006\uffe2\010\uffe2\011\uffe2\036\uffe2" +
    "\051\uffe2\052\uffe2\053\uffe2\054\uffe2\001\002\000\026\002" +
    "\uffe6\005\uffe6\006\uffe6\010\036\011\035\036\uffe6\051\uffe6" +
    "\052\uffe6\053\uffe6\054\uffe6\001\002\000\004\021\043\001" +
    "\002\000\006\022\ufff1\054\045\001\002\000\004\022\uffeb" +
    "\001\002\000\006\022\ufff1\030\072\001\002\000\004\022" +
    "\047\001\002\000\004\027\050\001\002\000\004\050\051" +
    "\001\002\000\012\036\015\052\023\053\014\054\016\001" +
    "\002\000\014\036\015\051\ufff1\052\023\053\014\054\016" +
    "\001\002\000\014\036\015\051\ufff1\052\023\053\014\054" +
    "\016\001\002\000\014\036\015\051\ufff1\052\023\053\014" +
    "\054\016\001\002\000\014\036\015\051\ufff1\052\023\053" +
    "\014\054\016\001\002\000\014\036\015\051\ufff1\052\023" +
    "\053\014\054\016\001\002\000\020\005\032\006\033\036" +
    "\015\051\ufff1\052\023\053\014\054\016\001\002\000\014" +
    "\036\015\051\ufff1\052\023\053\014\054\016\001\002\000" +
    "\004\051\062\001\002\000\016\002\uffed\036\uffed\051\uffed" +
    "\052\uffed\053\uffed\054\uffed\001\002\000\004\051\ufff2\001" +
    "\002\000\004\051\ufff4\001\002\000\004\051\ufff5\001\002" +
    "\000\004\051\ufff3\001\002\000\004\051\ufff7\001\002\000" +
    "\004\051\ufff8\001\002\000\004\051\ufff6\001\002\000\004" +
    "\054\075\001\002\000\004\022\uffe9\001\002\000\004\022" +
    "\uffec\001\002\000\006\022\ufff1\030\072\001\002\000\004" +
    "\022\uffea\001\002\000\006\002\ufffc\051\ufffc\001\002\000" +
    "\006\002\ufffa\051\ufffa\001\002\000\006\002\ufffd\051\ufffd" +
    "\001\002\000\006\002\ufffb\051\ufffb\001\002\000\006\002" +
    "\uffff\051\uffff\001\002\000\006\002\000\051\000\001\002" +
    "\000\006\002\ufffe\051\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\103\000\032\003\016\004\020\005\017\007\004\010" +
    "\006\011\003\012\010\013\012\014\007\015\011\020\005" +
    "\021\021\001\001\000\032\003\016\004\020\005\104\007" +
    "\004\010\006\011\003\012\010\013\012\014\007\015\011" +
    "\020\005\021\021\001\001\000\032\003\016\004\020\005" +
    "\103\007\004\010\006\011\003\012\010\013\012\014\007" +
    "\015\011\020\005\021\021\001\001\000\002\001\001\000" +
    "\032\003\016\004\020\005\102\007\004\010\006\011\003" +
    "\012\010\013\012\014\007\015\011\020\005\021\021\001" +
    "\001\000\032\003\016\004\020\005\101\007\004\010\006" +
    "\011\003\012\010\013\012\014\007\015\011\020\005\021" +
    "\021\001\001\000\032\003\016\004\020\005\100\007\004" +
    "\010\006\011\003\012\010\013\012\014\007\015\011\020" +
    "\005\021\021\001\001\000\032\003\016\004\020\005\077" +
    "\007\004\010\006\011\003\012\010\013\012\014\007\015" +
    "\011\020\005\021\021\001\001\000\032\003\016\004\020" +
    "\005\076\007\004\010\006\011\003\012\010\013\012\014" +
    "\007\015\011\020\005\021\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\003\016\013\027\014" +
    "\026\020\005\021\021\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\003" +
    "\016\020\040\021\021\001\001\000\010\003\016\020\033" +
    "\021\021\001\001\000\002\001\001\000\006\003\016\021" +
    "\037\001\001\000\006\003\016\021\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\004\043\016\045\001\001\000\002\001\001" +
    "\000\006\004\072\017\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\003\016\006\060" +
    "\007\052\010\053\011\051\012\055\013\056\014\054\015" +
    "\057\020\005\021\021\001\001\000\032\003\016\004\020" +
    "\005\070\007\004\010\006\011\003\012\010\013\012\014" +
    "\007\015\011\020\005\021\021\001\001\000\032\003\016" +
    "\004\020\005\067\007\004\010\006\011\003\012\010\013" +
    "\012\014\007\015\011\020\005\021\021\001\001\000\032" +
    "\003\016\004\020\005\066\007\004\010\006\011\003\012" +
    "\010\013\012\014\007\015\011\020\005\021\021\001\001" +
    "\000\032\003\016\004\020\005\065\007\004\010\006\011" +
    "\003\012\010\013\012\014\007\015\011\020\005\021\021" +
    "\001\001\000\032\003\016\004\020\005\064\007\004\010" +
    "\006\011\003\012\010\013\012\014\007\015\011\020\005" +
    "\021\021\001\001\000\032\003\016\004\020\005\063\007" +
    "\004\010\006\011\003\012\010\013\012\014\007\015\011" +
    "\020\005\021\021\001\001\000\032\003\016\004\020\005" +
    "\062\007\004\010\006\011\003\012\010\013\012\014\007" +
    "\015\011\020\005\021\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\004\072\017\075\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

  ComplexSymbolFactory f = new ComplexSymbolFactory();
  symbolFactory = f;
  File file = new File("input.txt");
  FileInputStream fis = null;
  try {
    fis = new FileInputStream(file);
  } catch (IOException e) {
    e.printStackTrace();
  } 
  lexer = new Lexer(f,fis);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexer.next_token(); 
    }


  protected Lexer lexer;
	private Symbol s;
	public void sintax_error(Symbol s){
		this.s  = s;	
	}
	public Symbol getS (){
		return this.s;
	}




/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= expr EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // expr ::= atrib expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expr ::= while expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expr ::= if expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expr ::= for expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expr ::= arith_op expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expr ::= logic_op expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expr ::= func_def expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expr ::= fim 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // exprS ::= atrib expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprS",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // exprS ::= while expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprS",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // exprS ::= if expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprS",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // exprS ::= for expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprS",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // exprS ::= arith_op expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprS",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // exprS ::= logic_op expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprS",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // exprS ::= func_def expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprS",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // fim ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fim",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // atrib ::= IDENTIFIER EQUAL STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("atrib",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // atrib ::= IDENTIFIER EQUAL arith_op 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("atrib",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // atrib ::= IDENTIFIER EQUAL logic_op 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("atrib",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // func_def ::= DEF IDENTIFIER LPAREN list_params RPAREN COLON_OP IDENT exprS DEDENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_def",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // list_params ::= IDENTIFIER list_params_a 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_params",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // list_params ::= fim 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_params",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // list_params_a ::= COMMA IDENTIFIER list_params_a 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_params_a",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // list_params_a ::= fim 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_params_a",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // number_aux ::= INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("number_aux",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // number_aux ::= NUMBERFLOAT_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("number_aux",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // arith_op ::= arith_op PLUS T 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_op",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // arith_op ::= arith_op MINUS T 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_op",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // arith_op ::= T 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_op",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // T ::= T TIMES F 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // T ::= T DIVISION F 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // T ::= F 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // F ::= number_aux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // F ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
